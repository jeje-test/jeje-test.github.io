// üåü Version : 1.1.0
console.log("üöÄ D√©but du script - Version 1.1.0");

// URL du script Google Apps Script
const scriptURL = "https://script.google.com/macros/s/AKfycbyXggS-vyVeLEQd4ymd8nj2NwT2QvCJVX1gB4hzp6ES0UBEy8afoHodg7MfkUjncyr6/exec";

// V√©rification de la disponibilit√© de Html5Qrcode
if (typeof Html5Qrcode === "undefined") {
    console.error("‚ùå Html5Qrcode non d√©fini !");
} else {
    console.log("‚úÖ Html5Qrcode bien charg√© !");
}

// üé® Affichage de la version sur la page
document.addEventListener("DOMContentLoaded", function () {
    const versionElement = document.createElement("p");
    versionElement.textContent = "üìå Version : 1.1.0";
    versionElement.style.textAlign = "center";
    versionElement.style.fontWeight = "bold";
    document.body.appendChild(versionElement);
});

// Fonction de scan
function startScanner() {
    console.log("üì∏ D√©marrage du scanner...");
    document.getElementById("scannerContainer").style.display = "block";

    const scanner = new Html5Qrcode("reader");
    const cameraConfig = { fps: 10, qrbox: 250, rememberLastUsedCamera: true };

    Html5Qrcode.getCameras().then(cameras => {
        if (cameras.length > 0) {
            const backCamera = cameras.find(camera => camera.label.toLowerCase().includes("back")) || cameras[0];

            scanner.start(
                backCamera.id,
                cameraConfig,
                qrCodeMessage => {
                    console.log("‚úÖ QR Code d√©tect√© :", qrCodeMessage);
                    scanner.stop();
                    sendScanToGoogleSheet(qrCodeMessage);
                },
                errorMessage => {
                    console.warn("‚ö†Ô∏è Erreur de scan :", errorMessage);
                }
            ).then(() => {
                console.log("üì∏ Scanner lanc√© !");
            }).catch(err => {
                console.error("‚ùå Erreur lors du d√©marrage du scanner :", err);
            });
        } else {
            console.error("‚ùå Aucune cam√©ra d√©tect√©e !");
        }
    }).catch(err => console.error("‚ùå Erreur lors de la r√©cup√©ration des cam√©ras :", err));
}

// Fonction d'envoi des donn√©es scann√©es √† Google Sheets
function sendScanToGoogleSheet(qrCodeData) {
    console.log("üì§ Envoi des donn√©es :", qrCodeData);
    
    const formData = new FormData();
    formData.append("data", qrCodeData);

    fetch(scriptURL, {
        method: "POST",
        body: formData
    })
    .then(response => response.text())
    .then(data => {
        console.log("‚úÖ R√©ponse Google Sheet :", data);
        alert("üìã Donn√©es envoy√©es avec succ√®s !");
    })
    .catch(error => {
        console.error("‚ùå Erreur d'envoi :", error);
        alert("‚ùå Erreur lors de l'envoi des donn√©es !");
    });
}

// Fonction de r√©cup√©ration des donn√©es depuis Google Sheets
function fetchDataFromGoogleSheet() {
    console.log("üì• R√©cup√©ration des donn√©es...");

    fetch(scriptURL + "?action=getData")
    .then(response => response.json())
    .then(data => {
        console.log("‚úÖ Donn√©es r√©cup√©r√©es :", data);

        let tableHTML = "<table border='1'><tr><th>Date</th><th>Donn√©e</th></tr>";
        data.forEach(row => {
            tableHTML += `<tr><td>${row.date}</td><td>${row.value}</td></tr>`;
        });
        tableHTML += "</table>";

        document.getElementById("dataContainer").innerHTML = tableHTML;
    })
    .catch(error => {
        console.error("‚ùå Erreur de r√©cup√©ration :", error);
        alert("‚ùå Erreur lors de la r√©cup√©ration des donn√©es !");
    });
}

// Ajout des √©v√©nements aux boutons
document.getElementById("startScan").addEventListener("click", startScanner);
document.getElementById("fetchData").addEventListener("click", fetchDataFromGoogleSheet);
document.getElementById("stopScan").addEventListener("click", () => {
    document.getElementById("scannerContainer").style.display = "none";
    console.log("‚ùå Scanner arr√™t√© !");
});
