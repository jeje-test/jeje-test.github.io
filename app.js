// üìå Version du script
const VERSION = "1.1.0";

// üìå URL du Google Apps Script
const scriptURL = "https://script.google.com/macros/s/AKfycbwigngwYHN6bR5pnRIr4wsk8egM2JrFailsv3IFfQYiSTbU-FZUdLFCF-xZudMdvVzS/exec";

document.addEventListener("DOMContentLoaded", function () {
    console.log("üöÄ D√©but du script (Version " + VERSION + ")");

    const startScanBtn = document.getElementById("startScan");
    const stopScanBtn = document.getElementById("stopScan");
    const fetchDataBtn = document.getElementById("fetchData");
    const scannerContainer = document.getElementById("scannerContainer");
    const reader = document.getElementById("reader");
    const dataContainer = document.getElementById("dataContainer");

    let scanner;

    // üîπ D√©marrer le scanner
    startScanBtn.addEventListener("click", function () {
        console.log("üì∏ Scanner demand√©...");
        scannerContainer.style.display = "block";

        scanner = new Html5Qrcode("reader");
        scanner.start(
            { facingMode: "environment" }, // Cam√©ra arri√®re
            {
                fps: 10,
                qrbox: 250
            },
            (qrCodeMessage) => {
                console.log("‚úÖ QR Code d√©tect√© :", qrCodeMessage);
                alert("QR Code d√©tect√© : " + qrCodeMessage);

                sendData(qrCodeMessage);
            },
            (errorMessage) => {
                console.warn("‚ö†Ô∏è Erreur de scan :", errorMessage);
            }
        ).then(() => {
            console.log("üì∏ Scanner lanc√© !");
        }).catch(err => {
            console.error("‚ùå Erreur lors du d√©marrage du scanner :", err);
        });
    });

    // üîπ Arr√™ter le scanner
    stopScanBtn.addEventListener("click", function () {
        if (scanner) {
            scanner.stop().then(() => {
                console.log("üõë Scanner arr√™t√©.");
                scannerContainer.style.display = "none";
            }).catch(err => {
                console.error("‚ùå Erreur lors de l'arr√™t du scanner :", err);
            });
        }
    });

    // üîπ Fonction pour envoyer les donn√©es scann√©es √† Google Sheets
    function sendData(qrCodeMessage) {
        console.log("üì§ Envoi des donn√©es :", qrCodeMessage);

        fetch(scriptURL, {
            method: "POST",
            body: new URLSearchParams({ data: qrCodeMessage })
        })
        .then(response => response.text())
        .then(data => {
            console.log("‚úÖ R√©ponse Google Sheets :", data);
            alert("üìã Donn√©es envoy√©es avec succ√®s !");
        })
        .catch(error => {
            console.error("‚ùå Erreur lors de l'envoi des donn√©es :", error);
            alert("‚ùå Erreur d'envoi !");
        });
    }

    // üîπ R√©cup√©rer les donn√©es associ√©es au QR Code
    fetchDataBtn.addEventListener("click", function () {
        const searchValue = prompt("üîé Entrez la valeur √† rechercher (C + D) :");
        if (!searchValue) {
            console.warn("‚ö†Ô∏è Recherche annul√©e.");
            return;
        }

        console.log("üîç Recherche des donn√©es pour :", searchValue);

        fetch(scriptURL + "?data=" + encodeURIComponent(searchValue))
        .then(response => response.json())
        .then(results => {
            console.log("üìä Donn√©es r√©cup√©r√©es :", results);
            if (results.length > 0) {
                let content = "<ul>";
                results.forEach(row => {
                    content += `<li>${row.join(" | ")}</li>`;
                });
                content += "</ul>";
                dataContainer.innerHTML = content;
            } else {
                dataContainer.innerHTML = "‚ùå Aucune donn√©e trouv√©e.";
            }
        })
        .catch(error => {
            console.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es :", error);
            dataContainer.innerHTML = "‚ùå Erreur lors de la r√©cup√©ration des donn√©es.";
        });
    });

});
